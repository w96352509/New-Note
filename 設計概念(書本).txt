範例整理 :
 in SpringBoot-PSI-2022
 DesignPattern :
   -> session01 :
        DuckDesign -> 工廠練習(FactoryMode) / Book(書本範例) -> new(加入策略模式加簡單工廠模式) / old(未套模式)
        Game       -> 策略模式練習(武器更換)
		StrategyMode -> 策略模式練習(計算機)
   
   -> session02 : book  -> meteorological (氣象站訂閱者模式練習)		
                           meteorological2(氣象站訂閱者模式練習) // 使用 JavaAPI
			      Drink -> 工廠模式	
                  phone -> 工廠 + 訂閱者
   
   -> session03	: Decorator -> (書中的咖啡店練習裝飾模式)
                  SingletonFactory -> (網上單例模式) 
                  IO -> (了解 IO 屬於裝飾者模式)	
   
   -> session04 : beveragestore  -> (網站上的策略模式練習)
                  beveragestore2 -> (網站上的策略模式練習套用工廠)
                  restaurant     ->	(網站上的裝飾者模式練習)			  
						  
設計概念 :
 1. 把可能需要變動的程式獨立出來
 2. 方法針對介面處理                            // "執行時"期動態的"改變"
 3. 多用實作                                    // 可將細部功能封裝起來
 4. 盡量讓需要互相的物件之間關係鬆綁            // 觀察者模式 
 5. 類別應該開放 , 以便擴充 , 也該關閉禁止修改  // OCP 開放關閉原則

系統是什麼 :
 1. 實現某些功能
 2. 功能複雜時需要由概念整理
 3. 概念轉換為系統架構
 4. 架構進行模組化
 5. 程式碼堆砌而成

設計模式很像模組 , 由物件導向特性組成 
-------------------------------------------------------------------


目錄 :
  1. 策略模式 : 封裝了演算法家族 , 個別封裝起來 , 根據呼叫不同的類進行調用
       
  2. 工廠模式 : 定義一個用於建立物品的介面 , 讓子類決定實體化哪一個類別 
  
  3. 訂閱者模式 : 
       1. 物件之間定義 1 對 多 的關係
       2. Subject 透果共同介面更新 Observer
       3. 採用鬆綁方式(互相不知道對方細節)
       4. 有多個 Observer 不可規定順序
       5. JavaAPI -> Observerable	

  4. 單例模式   : 全部人使用同一個類別	   
  
  5. 裝飾者模式 :
       1. 繼承屬於擴充方式之一 , 但彈性不佳
	   2. 在設計中需要動態新增 + 允許被擴充等
	   3. 裝飾者模式 = 一群裝飾類別用來封裝具象元件
	   4. 裝飾者型態 = 被裝飾者型態
	   5. 會導致多數小類別


-------------------------------------------------------------------
書本第一章(鴨子模擬器) : 了解設計模式
  零設計模式 :
    一.
      class Duck : quack() / swim() / abstract display()  // 所有鴨都會 quack() / swim() , 每種鴨外觀不同 display()
      class plasticDuck / RedheadDuck extends Duck
     
	二. 加入 fly() 方法
      class Duck : quack() / swim() / fly() / abstract display() // 所有鴨都會 quack() / swim() , 每種鴨外觀不同 display() 	 
      class plasticDuck / RedheadDuck / RubberDuck extends Duck  // RubberDuck 不會飛(問題發生)
	  
    
	導致 : 多次重複 / 不意改變 / 難以得知全部行為 / 改變導致全不受影響 / 每隻鴨子都需要覆寫
	結語 : 由此得知涉及<維護> 為了<再利用> 使用 extends 不會有好結果

  優化 1 -> 把可能需要變動的程式獨立出來 (quack() / fly()) 並提供介面讓細部動作去實做
    
	一. 介面 <--- 細部功能
     interface : Fly -> fly()     <--- FlyYes -> fly(實踐飛行) / FlyNo -> fly(啥都不做) 
	 interface : Quack -> quack() <--- YesQuack -> quack(叫)   / YesQuack -> quack(不叫) / 等等叫聲...
     // 讓 Fly 與 Quack 物件可被再三利用 , 新增細部功能時也不會影響使用其他細部的功能

    二. 設定 Duck
      class Duck : 宣告介面 : Fly fly , Quack quack
	               方法     : swim() / abstract display() / 
				              total(Fly fly , Quack quack){swim() , display() , fly.fly() , quack.quack()}  
	
	三. 設定其他種類 Duck : RubberDuck extends Duck
      class RubberDuck    :覆寫 display();

    四. Main -> Duck RubberDuck = new RubberDuck(); -> RubberDuck.total(new NFly(), new YQuack());

    優點 : 不確定功能獨立出來 , 不用重覆覆寫 , 設定策略即可
	       執行實只需要呼叫主型別並呼叫所有方法設定策略	


-------------------------------------------------------------------
書本第二章(氣象監測系統) : 觀察者模式
    
  說明 : 氣象站 <-(取得資料) Weather 物件 -(顯示)> 顯示裝置
         氣象站提供 : WeatherData -> getTemperature()          // 取得溫度 
		                           / getHumidity()             // 取得濕度 
								   / getPressure()             // 取得壓力
								   / measurementsChanged()     // 更新資料時呼叫此方法

  目前知道 : 3 個 get 方法 / 1 個被呼叫方法 / 更需要 3 個顯示(需可擴充)
  
  設計 :
        interface :
		  
		  1. Subject        : void registerObserver(Observer o); / void removeObserver(Observer o); // 主題介面
		                      void notifyObserver();                      
		  
		  2. Observer       : void update(float temp , float humidity , float pressure);  
                              // 當氣象數據改變 , Subject 會把這些參數傳給 Observer		  
		  
		  3. DisplayElement : display()  // 當佈告版需要顯示資料時使用 , 因每個佈告版資料都不同 , 所以獨立出來
        
		Class :
		  1. WeatherData implements Subject :
              屬性 :
			    1. private ArrayList<Observer> observers = new ArrayList<>(); // 多個訂閱者
                2. private float temp;      // 溫度
				3. private float humidity;  // 濕度
				4. private float pressure;	// 氣壓			
		 
		      實踐 :
			    1. registerObserver(Observer o){ observers.add(o); } // 新增 Observer
                2. removeObserver(Observer o)  { int i = observers.indexOf(o); if(i>=0){observers.remove(i)}} // 刪除 Observer
                3. notifyObserver(){ for -> observers.size() -> 得到 Observers.get(i) -> observer.update(....) } 
				   // 更新資料給 observer				
                
			  方法 :	
				1. measurementsChanged() -> 呼叫 notifyObserver();
				2. setMeasurements(float temp , float humidity , float pressure){
				    this.temp = temp;
					this.humidity = humidity;
					this.pressure = pressure;
					measurementsChanged();  
				   }
            
			2. CurrentConditionDisplay implements Observer , DisplayElement
                屬性 :
                  1. private float temp;
	              2. private float humidity;
	            
                建構 :
                  1. public CurrentConditionDisplay(Subject weatherData) { weatherData.registerObserver(this); }
                     // 幫助在 Main 時 , 宣告 CurrentConditionDisplay 時並把自己加入主題
                  
                實踐 : 
                  1. display() -> sout(....)
                  2. update(float temp, float humidity, float pressure){
				        this.temp = temp;
						this.humidity = humidity;
						display();
				     }			  
            
			3. Main : 
                 1. 新建具體的主題物件 WeatherData weatherData = new WeatherData();  
                 2. 新建 Observer = CurrentConditionDisplay conditionDisplay = new CurrentConditionDisplay(weatherData); 
				 3. 更新主題參數

  方法順序 : 
    1. Observer 建構時加入 Subject // 因此 CurrentConditionDisplay 進入 Observers 陣列中
	2. setMeasurements(80, 65, 30) -> measurementsChanged() -> notifyObserver() -> observer.update(temp, humidity, pressure);
	                               -> display()
  
  總結 : Observer 透過建構式加入 Subject 
         Subject  透過 update 連到 Observer
         Main 只需要知道 observer 們 , 跟設定一次 Subject 參數		 


書本第二章(氣象監測系統) : 觀察者模式套用 java.util. Observable(class) / Observer(Interface) 
  優點 : 省去資料結構
  
  說明 : 氣象站 <-(取得資料) Weather 物件 -(顯示)> 顯示裝置 
         氣象站提供 : WeatherData -> getTemperature()          // 取得溫度 
		                           / getHumidity()             // 取得濕度 
								   / getPressure()             // 取得壓力
								   / measurementsChanged()     // 更新資料時呼叫此方法

  								   
  操作 : 主題物件 extends Observable / 訂閱者 implements Observer
     
  實作 : 
    1. WeatherData extends Observable
         屬性 :
           private float temp;
	       private float humidity;
	       private float pressure;

         實踐 :
           1. 無參建構式
           2. get...
           3. measurementsChanged(){ setChanged(); , notifyObservers(); } 
		      // 紀錄並呼叫 , 呼叫 notifyObserves() 前需呼叫 setChanged
              // notifyObserves() 拉取 / notifyObservers(Object args); 推送			  
      
	       4. setMeasurements(float temp , float humidity , float pressure){
				    this.temp = temp;
					this.humidity = humidity;
					this.pressure = pressure;
					measurementsChanged();  
			   }

    2. CurrentConditionDisplay implements Observer , DisplayElement
	     屬性 :
		   private float temp;
		   private float humidity;
		   Observable observable;
		 
         實踐 :
           1. 建構式(Observable observable) -> observable.add(this);
           2. @Override -> display();
           3. @Override -> update(){
		        if (o instanceof WeatherData) {  // 如果 Observable 是 Weather 的訂閱者
				    WeatherData weatherData = (WeatherData)o; // 呼叫主題
				    this.temp = weatherData.getTemp();
				    this.humidity = weatherData.getHumidity();
				    display();
				}
		      }		   
	
         總結 : 
           1. 省略資料結構宣告
           2. setChanged(); 紀錄 -> notifyObservers(); (拉取) / notifyObservers(Object args); (推送)


-------------------------------------------------------------------  
書本第三章(咖啡店) : 裝飾者模式
  
  說明 : 飲料(Beverage) -> 咖啡加上摩卡跟奶泡 
    1. 咖啡物件 extends Beverage 的 cost();
    2. 建立摩卡物件將咖啡物件包(Warp)起 // 裝飾者的型態為被裝飾者 
    3. 建立奶泡物件將摩卡物件包(Warp)起	
	4. 計算 cost 從外往內              			   
    5. 以上知道 -> 
         5-1. 裝飾者與被裝飾者的父類別相同
         5-2. 裝飾者可(1/多)
         5-3. 裝飾者可隨意時機(裝飾前/後)加入新方法

  優點 : 動態的將方法加於物件上 , 比繼承更有彈性		 
  
  設計 :
    class : 
	  1. Beverage -> getDescription(); / abstract cost(); // 被裝飾者
	  2. HouseBlend / DarkRoast // 裝飾者
      3. CondimentDecorator -> 呼叫 getDescription();     // 用於擴充 Beverage 
      4. Milk / Mocha / Whip 	  
  
  實作 :
    
	1. Beverage           -> String description / getDescription() { return description; } / abstract double cost();
	
	2. CondimentDecorator extends Beverage -> public abstract String getDescription(); // 用於改變加料後的描述
  	
    3. DarkRoast extends Beverage (飲料) -> DarkRoast() { description = "DarkRoast"; } // 設定飲料描述用
                                         -> cost() -> return 0.0;                      // 覆寫 cost()
		 									   
    4. Mocha extends CondimentDecorator (料) 
	     -> 紀錄被裝飾者     : Beverage beverage;                                           // 紀錄被裝飾者
		 -> 宣告實放入被裝者 : public Mocha(Beverage beverage){ this.beverage = beverage; } // 配合上方取得被裝飾者
		 -> 覆寫 getDescription(){ return beverage.getDescription()+", Mocha"; }            // 取得先前描述
		 ->                cost(){ return .20+beverage.cost();  }                           // 價格 + 被裝飾者的價格
	
	5. Main 呼叫
         1. 無加料 = 裝飾飲品 -> Beverage beverage = new DarkRoast();
         
         2. 有加料 = 裝飾飲品 + 裝飾料 -> Beverage beverage2 = new DarkRoast(); / beverage2 = new Mocha(beverage);		 
	
  順序 :
    1. Beverage(被裝飾者) -> DarkRoast(裝飾者)    
	                      -> CondimentDecorator(裝飾者(可有可無為了提醒自己要改描述跟分類料與飲)) -> Mocha(裝飾者)
	
	2. 特性 : 裝飾者與被裝飾者的父類別相同

  總結 : 主要靠多型與繼承基底完成   
		
		
-------------------------------------------------------------------		   
書本第四章():工廠模式	                  	
	 